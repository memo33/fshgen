package fshgen

import io.github.memo33.scdbpf.compat.{Image, RGBA}

object Curves {

  trait Curve {
    val red, green, blue: Array[Int]
    def apply(img: Image[RGBA]): Image[RGBA] = new Image[RGBA] {
      def width = img.width; def height = img.height
      def apply(x: Int, y: Int) = {
        val p = img(x, y)
        RGBA((p.alpha & 0xff) << 24 |
          blue(p.blue & 0xff) << 16 |
          green(p.green & 0xff) << 8 |
          red(p.red & 0xff))
      }
    }
  }

  // the true darkening mapping found empirically by measuring all 256 shades of grey
  private lazy val darkPalette = Seq(  // 0xRRGGBB
    0x000000, 0x000000, 0x010101, 0x020202, 0x030303, 0x040404, 0x050505, 0x060606,
    0x060606, 0x070707, 0x080808, 0x090909, 0x0A0A0A, 0x0B0B0B, 0x0C0C0C, 0x0D0C0C,
    0x0D0D0D, 0x0E0E0E, 0x0F0F0F, 0x101010, 0x111111, 0x121212, 0x131213, 0x131313,
    0x141414, 0x151515, 0x161616, 0x171717, 0x181818, 0x191819, 0x1A1919, 0x1A1A1A,
    0x1B1B1B, 0x1C1C1C, 0x1D1D1D, 0x1E1E1E, 0x1F1E1F, 0x201F20, 0x212020, 0x212121,
    0x222222, 0x232323, 0x242424, 0x252425, 0x262526, 0x272626, 0x272727, 0x282828,
    0x292929, 0x2A2A2A, 0x2B2A2B, 0x2C2B2C, 0x2D2C2C, 0x2E2D2D, 0x2E2E2E, 0x2F2F2F,
    0x303030, 0x313031, 0x323132, 0x333233, 0x343333, 0x353434, 0x353535, 0x363636,
    0x373637, 0x383738, 0x393839, 0x3A3939, 0x3B3A3A, 0x3B3B3B, 0x3C3C3C, 0x3D3C3D,
    0x3E3D3E, 0x3F3E3F, 0x403F40, 0x414040, 0x424141, 0x424242, 0x434243, 0x444344,
    0x454445, 0x464546, 0x474646, 0x484747, 0x494848, 0x494849, 0x4A494A, 0x4B4A4B,
    0x4C4B4C, 0x4D4C4D, 0x4E4D4D, 0x4F4E4E, 0x4F4E4F, 0x504F50, 0x515051, 0x525152,
    0x535253, 0x545353, 0x555454, 0x565455, 0x565556, 0x575657, 0x585758, 0x595859,
    0x5A5959, 0x5B5A5A, 0x5C5A5B, 0x5C5B5C, 0x5D5C5D, 0x5E5D5E, 0x5F5E5F, 0x605F60,
    0x616060, 0x626061, 0x636162, 0x636263, 0x646364, 0x656465, 0x666566, 0x676666,
    0x686667, 0x696768, 0x6A6869, 0x6A696A, 0x6B6A6B, 0x6C6B6C, 0x6D6C6D, 0x6E6C6D,
    0x6F6D6E, 0x706E6F, 0x706F70, 0x717071, 0x727172, 0x737273, 0x747273, 0x757374,
    0x767475, 0x777576, 0x777677, 0x787778, 0x797879, 0x7A7879, 0x7B797A, 0x7C7A7B,
    0x7D7B7C, 0x7E7C7D, 0x7E7D7E, 0x7F7E7F, 0x807E80, 0x817F80, 0x828081, 0x838182,
    0x848283, 0x848384, 0x858485, 0x868486, 0x878586, 0x888687, 0x898788, 0x8A8889,
    0x8B898A, 0x8B8A8B, 0x8C8A8C, 0x8D8B8D, 0x8E8C8D, 0x8F8D8E, 0x908E8F, 0x918F90,
    0x929091, 0x929092, 0x939193, 0x949293, 0x959394, 0x969495, 0x979596, 0x989697,
    0x989698, 0x999799, 0x9A989A, 0x9B999A, 0x9C9A9B, 0x9D9B9C, 0x9E9C9D, 0x9F9C9E,
    0x9F9D9F, 0xA09EA0, 0xA19FA0, 0xA2A0A1, 0xA3A1A2, 0xA4A2A3, 0xA5A2A4, 0xA6A3A5,
    0xA6A4A6, 0xA7A5A6, 0xA8A6A7, 0xA9A7A8, 0xAAA8A9, 0xABA8AA, 0xACA9AB, 0xACAAAC,
    0xADABAD, 0xAEACAD, 0xAFADAE, 0xB0AEAF, 0xB1AEB0, 0xB2AFB1, 0xB3B0B2, 0xB3B1B3,
    0xB4B2B3, 0xB5B3B4, 0xB6B4B5, 0xB7B4B6, 0xB8B5B7, 0xB9B6B8, 0xB9B7B9, 0xBAB8BA,
    0xBBB9BA, 0xBCBABB, 0xBDBABC, 0xBEBBBD, 0xBFBCBE, 0xC0BDBF, 0xC0BEC0, 0xC1BFC0,
    0xC2C0C1, 0xC3C0C2, 0xC4C1C3, 0xC5C2C4, 0xC6C3C5, 0xC7C4C6, 0xC7C5C7, 0xC8C6C7,
    0xC9C6C8, 0xCAC7C9, 0xCBC8CA, 0xCCC9CB, 0xCDCACC, 0xCDCBCD, 0xCECCCD, 0xCFCCCE,
    0xD0CDCF, 0xD1CED0, 0xD2CFD1, 0xD3D0D2, 0xD4D1D3, 0xD4D2D3, 0xD5D2D4, 0xD6D3D5,
    0xD7D4D6, 0xD8D5D7, 0xD9D6D8, 0xDAD7D9, 0xDBD8DA, 0xDBD8DA, 0xDCD9DB, 0xDDDADC)

  object Darkening extends Curve {
    val red = darkPalette.map(a => (a >> 16) & 0xff).toArray
    val green = darkPalette.map(a => (a >> 8) & 0xff).toArray
    val blue = darkPalette.map(a => a & 0xff).toArray
  }

  private def invertCurve(curve: Array[Int]): Seq[Int] = {
    val oldMax = curve.last
    val newMax = 255
    val m = curve.zipWithIndex.foldLeft(Map.empty[Int, Int]) { case (m, (b, a)) =>
      if (!m.contains(b)) m + (b -> a)
      else m + (b -> Seq(m(b), a).minBy(a2 => (b * newMax.toFloat / oldMax - a2).abs))  // pick closest in case of multiple preimages
    }
    (0 to oldMax).map(m) ++ Seq.fill(newMax-oldMax)(newMax)
  }

  object Brightening extends Curve {
    val red = invertCurve(Darkening.red).toArray
    val green = invertCurve(Darkening.green).toArray
    val blue = invertCurve(Darkening.blue).toArray
  }
}
